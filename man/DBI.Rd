% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/Driver.R, R/Connection.R,
%   R/Result.R, R/dbClearResult_Result.R, R/dbConnect_Driver.R,
%   R/dbDisconnect_Connectsion.R, R/dbExistsTable_Connection_character.R,
%   R/dbFetch_Result.R, R/dbHasCompleted_Result.R,
%   R/dbIsValid_Connection.R, R/dbIsValid_Driver.R,
%   R/dbIsValid_Result.R, R/dbListFields_Connection_character.R,
%   R/dbListTables_Connection.R, R/dbQuoteIdentifier_Connection_character.R,
%   R/dbQuoteString_Connection_character.R,
%   R/dbRemoveTable_Connection_character.R,
%   R/dbSendQuery_Connection_character.R, R/dbWriteTable_Connection_character.R,
%   R/show_Connection.R, R/show_Driver.R, R/show_Result.R
\docType{class}
\name{DBI}
\alias{DBI}
\alias{polarssql_driver-class}
\alias{polarssql_connection-class}
\alias{polarssql_result-class}
\alias{dbClearResult_polarssql_result}
\alias{dbClearResult,polarssql_result-method}
\alias{dbConnect_polarssql_driver}
\alias{dbConnect,polarssql_driver-method}
\alias{dbDisconnect_polarssql_connection}
\alias{dbDisconnect,polarssql_connection-method}
\alias{dbExistsTable_polarssql_connection_character}
\alias{dbExistsTable,polarssql_connection,character-method}
\alias{dbFetch_polarssql_result}
\alias{dbFetch,polarssql_result-method}
\alias{dbHasCompleted_polarssql_result}
\alias{dbHasCompleted,polarssql_result-method}
\alias{dbIsValid_polarssql_connection}
\alias{dbIsValid,polarssql_connection-method}
\alias{dbIsValid_polarssql_driver}
\alias{dbIsValid,polarssql_driver-method}
\alias{dbIsValid_polarssql_result}
\alias{dbIsValid,polarssql_result-method}
\alias{dbListFields_polarssql_connection_character}
\alias{dbListFields,polarssql_connection,character-method}
\alias{dbListTables_polarssql_connection}
\alias{dbListTables,polarssql_connection-method}
\alias{dbQuoteIdentifier_polarssql_connection_character}
\alias{dbQuoteIdentifier,polarssql_connection,character-method}
\alias{dbQuoteString_polarssql_connection_character}
\alias{dbQuoteString,polarssql_connection,character-method}
\alias{dbRemoveTable_polarssql_connection_character}
\alias{dbRemoveTable,polarssql_connection,character-method}
\alias{dbSendQuery_polarssql_connection_character}
\alias{dbSendQuery,polarssql_connection,character-method}
\alias{dbWriteTable_polarssql_connection_character_data.frame}
\alias{dbWriteTable,polarssql_connection,character,data.frame-method}
\alias{show_polarssql_connection}
\alias{show,polarssql_connection-method}
\alias{show_polarssql_driver}
\alias{show,polarssql_driver-method}
\alias{show_polarssql_result}
\alias{show,polarssql_result-method}
\title{DBI methods}
\usage{
\S4method{dbClearResult}{polarssql_result}(res, ...)

\S4method{dbConnect}{polarssql_driver}(drv, ...)

\S4method{dbDisconnect}{polarssql_connection}(conn, ...)

\S4method{dbExistsTable}{polarssql_connection,character}(conn, name, ...)

\S4method{dbFetch}{polarssql_result}(res, n = -1, ...)

\S4method{dbHasCompleted}{polarssql_result}(res, ...)

\S4method{dbIsValid}{polarssql_connection}(dbObj, ...)

\S4method{dbIsValid}{polarssql_driver}(dbObj, ...)

\S4method{dbIsValid}{polarssql_result}(dbObj, ...)

\S4method{dbListFields}{polarssql_connection,character}(conn, name, ...)

\S4method{dbListTables}{polarssql_connection}(conn, ...)

\S4method{dbQuoteIdentifier}{polarssql_connection,character}(conn, x, ...)

\S4method{dbQuoteString}{polarssql_connection,character}(conn, x, ...)

\S4method{dbRemoveTable}{polarssql_connection,character}(conn, name, ..., fail_if_missing = TRUE)

\S4method{dbSendQuery}{polarssql_connection,character}(conn, statement, ...)

\S4method{dbWriteTable}{polarssql_connection,character,data.frame}(conn, name, value, ..., overwrite = FALSE)

\S4method{show}{polarssql_connection}(object)

\S4method{show}{polarssql_driver}(object)

\S4method{show}{polarssql_result}(object)
}
\arguments{
\item{res}{An object inheriting from \linkS4class{DBIResult}.}

\item{...}{Other arguments passed on to methods.}

\item{drv}{an object that inherits from \linkS4class{DBIDriver},
or an existing \linkS4class{DBIConnection}
object (in order to clone an existing connection).}

\item{conn}{A \linkS4class{DBIConnection} object, as returned by
\code{\link[DBI:dbConnect]{dbConnect()}}.}

\item{name}{The table name, passed on to \code{\link[DBI:dbQuoteIdentifier]{dbQuoteIdentifier()}}. Options are:
\itemize{
\item a character string with the unquoted DBMS table name,
e.g. \code{"table_name"},
\item a call to \code{\link[DBI:Id]{Id()}} with components to the fully qualified table name,
e.g. \code{Id(schema = "my_schema", table = "table_name")}
\item a call to \code{\link[DBI:SQL]{SQL()}} with the quoted and fully qualified table name
given verbatim, e.g. \code{SQL('"my_schema"."table_name"')}
}}

\item{n}{maximum number of records to retrieve per fetch. Use \code{n = -1}
or \code{n = Inf}
to retrieve all pending records.  Some implementations may recognize other
special values.}

\item{dbObj}{An object inheriting from \linkS4class{DBIObject},
i.e. \linkS4class{DBIDriver}, \linkS4class{DBIConnection},
or a \linkS4class{DBIResult}}

\item{x}{A character vector, \link[DBI]{SQL} or \link[DBI]{Id} object to quote as identifier.}

\item{fail_if_missing}{If \code{FALSE}, \code{dbRemoveTable()} succeeds if the
table doesn't exist.}

\item{statement}{a character string containing SQL.}

\item{value}{a \link{data.frame} (or coercible to data.frame).}

\item{overwrite}{Allow overwriting the destination table. Cannot be
\code{TRUE} if \code{append} is also \code{TRUE}.}

\item{object}{Any R object}
}
\description{
Implementations of pure virtual functions defined in the \code{DBI} package.
}
