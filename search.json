[{"path":"https://rpolars.github.io/r-polarssql/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2023 polarssql authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://rpolars.github.io/r-polarssql/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Tatsuya Shima. Author, maintainer.","code":""},{"path":"https://rpolars.github.io/r-polarssql/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Shima T (2024). polarssql: 'polars' backend 'DBI'.. R package version 0.0.0.9000, https://github.com/rpolars/r-polarssql, https://rpolars.github.io/r-polarssql/.","code":"@Manual{,   title = {polarssql: A 'polars' backend for 'DBI'.},   author = {Tatsuya Shima},   year = {2024},   note = {R package version 0.0.0.9000, https://github.com/rpolars/r-polarssql},   url = {https://rpolars.github.io/r-polarssql/}, }"},{"path":"https://rpolars.github.io/r-polarssql/index.html","id":"polarssql","dir":"","previous_headings":"","what":"A polars backend for DBI.","title":"A polars backend for DBI.","text":"polarssql experimental DBI-compliant interface Polars. Polars actual database, support full DBI functionality. Please check Polars User Guide supported SQL features.","code":""},{"path":"https://rpolars.github.io/r-polarssql/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"A polars backend for DBI.","text":"polars R package polarssql can installed R-universe:","code":"Sys.setenv(NOT_CRAN = \"true\") # for installing the polars package with pre-built binary install.packages(\"polarssql\", repos = c(\"https://rpolars.r-universe.dev\", getOption(\"repos\")))"},{"path":"https://rpolars.github.io/r-polarssql/index.html","id":"example","dir":"","previous_headings":"","what":"Example","title":"A polars backend for DBI.","text":"polarssql also provides functions simpler use, inspired duckdb package, , basic supports dbplyr also implemented.","code":"library(DBI)  con <- dbConnect(polarssql::polarssql()) dbWriteTable(con, \"mtcars\", mtcars)  # We can fetch all results: res <- dbSendQuery(con, \"SELECT * FROM mtcars WHERE cyl = 4\") dbFetch(res) #>     mpg cyl  disp  hp drat    wt  qsec vs am gear carb #> 1  22.8   4 108.0  93 3.85 2.320 18.61  1  1    4    1 #> 2  24.4   4 146.7  62 3.69 3.190 20.00  1  0    4    2 #> 3  22.8   4 140.8  95 3.92 3.150 22.90  1  0    4    2 #> 4  32.4   4  78.7  66 4.08 2.200 19.47  1  1    4    1 #> 5  30.4   4  75.7  52 4.93 1.615 18.52  1  1    4    2 #> 6  33.9   4  71.1  65 4.22 1.835 19.90  1  1    4    1 #> 7  21.5   4 120.1  97 3.70 2.465 20.01  1  0    3    1 #> 8  27.3   4  79.0  66 4.08 1.935 18.90  1  1    4    1 #> 9  26.0   4 120.3  91 4.43 2.140 16.70  0  1    5    2 #> 10 30.4   4  95.1 113 3.77 1.513 16.90  1  1    5    2 #> 11 21.4   4 121.0 109 4.11 2.780 18.60  1  1    4    2  # Clear the result dbClearResult(res)  # Or a chunk at a time res <- dbSendQuery(con, \"SELECT * FROM mtcars WHERE cyl = 4\") while (!dbHasCompleted(res)) {   chunk <- dbFetch(res, n = 5)   print(nrow(chunk)) } #> [1] 5 #> [1] 5 #> [1] 1  # Clear the result dbClearResult(res)  # We can use table functions to read files directly: tf <- tempfile(fileext = \".parquet\") on.exit(unlink(tf)) polars::as_polars_lf(mtcars)$sink_parquet(tf)  dbGetQuery(con, paste0(\"SELECT * FROM read_parquet('\", tf, \"') ORDER BY mpg DESC LIMIT 3\")) #>    mpg cyl disp  hp drat    wt  qsec vs am gear carb #> 1 33.9   4 71.1  65 4.22 1.835 19.90  1  1    4    1 #> 2 32.4   4 78.7  66 4.08 2.200 19.47  1  1    4    1 #> 3 30.4   4 95.1 113 3.77 1.513 16.90  1  1    5    2 library(polarssql)  # These functions use the built-in connection by default, so we don't need to specify connection  # Resgister a data.frame to the built-in connection polarssql_register(df = mtcars)  # Get the query result as a polars LazyFrame polarssql_query(\"SELECT * FROM df WHERE cyl = 4\") #> [1] \"polars LazyFrame naive plan: (run ldf$describe_optimized_plan() to see the optimized plan)\" #>  SELECT [col(\"mpg\"), col(\"cyl\"), col(\"disp\"), col(\"hp\"), col(\"drat\"), col(\"wt\"), col(\"qsec\"), col(\"vs\"), col(\"am\"), col(\"gear\"), col(\"carb\")] FROM #>   FILTER [(col(\"cyl\")) == (4)] FROM #>  #>   DF [\"mpg\", \"cyl\", \"disp\", \"hp\"]; PROJECT */11 COLUMNS; SELECTION: \"None\"  # Unregister the table polarssql_unregister(\"df\") library(dplyr, warn.conflicts = FALSE)  # Resgister a data.frame to the built-in connection, and query it via dbplyr tbl_polarssql(mtcars) |>   filter(cyl == 4) |>   arrange(desc(mpg)) |>   head(3) |>   compute() #> shape: (3, 11) #> ┌──────┬─────┬──────┬───────┬───┬─────┬─────┬──────┬──────┐ #> │ mpg  ┆ cyl ┆ disp ┆ hp    ┆ … ┆ vs  ┆ am  ┆ gear ┆ carb │ #> │ ---  ┆ --- ┆ ---  ┆ ---   ┆   ┆ --- ┆ --- ┆ ---  ┆ ---  │ #> │ f64  ┆ f64 ┆ f64  ┆ f64   ┆   ┆ f64 ┆ f64 ┆ f64  ┆ f64  │ #> ╞══════╪═════╪══════╪═══════╪═══╪═════╪═════╪══════╪══════╡ #> │ 33.9 ┆ 4.0 ┆ 71.1 ┆ 65.0  ┆ … ┆ 1.0 ┆ 1.0 ┆ 4.0  ┆ 1.0  │ #> │ 32.4 ┆ 4.0 ┆ 78.7 ┆ 66.0  ┆ … ┆ 1.0 ┆ 1.0 ┆ 4.0  ┆ 1.0  │ #> │ 30.4 ┆ 4.0 ┆ 95.1 ┆ 113.0 ┆ … ┆ 1.0 ┆ 1.0 ┆ 5.0  ┆ 2.0  │ #> └──────┴─────┴──────┴───────┴───┴─────┴─────┴──────┴──────┘"},{"path":"https://rpolars.github.io/r-polarssql/reference/DBI.html","id":null,"dir":"Reference","previous_headings":"","what":"DBI methods — DBI","title":"DBI methods — DBI","text":"Implementations pure virtual functions defined DBI package.","code":""},{"path":"https://rpolars.github.io/r-polarssql/reference/DBI.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DBI methods — DBI","text":"","code":"# S4 method for polarssql_result dbClearResult(res, ...)  # S4 method for polarssql_driver dbConnect(drv, ...)  # S4 method for polarssql_connection dbDisconnect(conn, ...)  # S4 method for polarssql_connection,character dbExistsTable(conn, name, ...)  # S4 method for polarssql_result dbFetch(res, n = -1, ...)  # S4 method for polarssql_result dbGetRowsAffected(res, ...)  # S4 method for polarssql_result dbHasCompleted(res, ...)  # S4 method for polarssql_connection dbIsValid(dbObj, ...)  # S4 method for polarssql_driver dbIsValid(dbObj, ...)  # S4 method for polarssql_result dbIsValid(dbObj, ...)  # S4 method for polarssql_connection,character dbListFields(conn, name, ...)  # S4 method for polarssql_connection dbListTables(conn, ...)  # S4 method for polarssql_connection,character dbQuoteIdentifier(conn, x, ...)  # S4 method for polarssql_connection,character dbQuoteString(conn, x, ...)  # S4 method for polarssql_connection,character dbRemoveTable(conn, name, ..., fail_if_missing = TRUE)  # S4 method for polarssql_connection,character dbSendQuery(conn, statement, ...)  # S4 method for polarssql_connection,character,data.frame dbWriteTable(conn, name, value, ..., overwrite = FALSE)  # S4 method for polarssql_connection show(object)  # S4 method for polarssql_driver show(object)  # S4 method for polarssql_result show(object)"},{"path":"https://rpolars.github.io/r-polarssql/reference/DBI.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DBI methods — DBI","text":"res object inheriting DBIResult. ... arguments passed methods. drv object inherits DBIDriver, existing DBIConnection object (order clone existing connection). conn DBIConnection object, returned dbConnect(). name table name, passed dbQuoteIdentifier(). Options : character string unquoted DBMS table name, e.g. \"table_name\", call Id() components fully qualified table name, e.g. Id(schema = \"my_schema\", table = \"table_name\") call SQL() quoted fully qualified table name given verbatim, e.g. SQL('\"my_schema\".\"table_name\"') n maximum number records retrieve per fetch. Use n = -1 n = Inf retrieve pending records.  implementations may recognize special values. dbObj object inheriting DBIObject, .e. DBIDriver, DBIConnection, DBIResult x character vector, SQL Id object quote identifier. fail_if_missing FALSE, dbRemoveTable() succeeds table exist. statement character string containing SQL. value data.frame (coercible data.frame). overwrite Allow overwriting destination table. TRUE append also TRUE. object R object","code":""},{"path":"https://rpolars.github.io/r-polarssql/reference/compute.tbl_polarssql_connection.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute results of a dbplyr query — as_polars_lf.tbl_polarssql_connection","title":"Compute results of a dbplyr query — as_polars_lf.tbl_polarssql_connection","text":"Compute results dbplyr query","code":""},{"path":"https://rpolars.github.io/r-polarssql/reference/compute.tbl_polarssql_connection.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute results of a dbplyr query — as_polars_lf.tbl_polarssql_connection","text":"","code":"# S3 method for tbl_polarssql_connection as_polars_lf(x, ..., cte = TRUE)  # S3 method for tbl_polarssql_connection as_polars_df(x, ..., cte = TRUE)  # S3 method for tbl_polarssql_connection compute(x, ..., n = Inf, cte = TRUE)  # S3 method for tbl_polarssql_connection as.data.frame(x, ..., cte = TRUE)"},{"path":"https://rpolars.github.io/r-polarssql/reference/compute.tbl_polarssql_connection.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute results of a dbplyr query — as_polars_lf.tbl_polarssql_connection","text":"x tbl_polarssql_connection object. ... as_polars_lf(<tbl_polarssql_connection>): Ignored. functions: arguments passed as_polars_df(<RPolarsLazyFrame>). cte Use common table expressions generated SQL? n Number rows fetch. Defaults Inf, meaning rows.","code":""},{"path":"https://rpolars.github.io/r-polarssql/reference/compute.tbl_polarssql_connection.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute results of a dbplyr query — as_polars_lf.tbl_polarssql_connection","text":"","code":"library(dplyr, warn.conflicts = FALSE) library(polars)  t <- tbl_polarssql(mtcars) |>   filter(cyl == 4)  as_polars_lf(t) #> [1] \"polars LazyFrame naive plan: (run ldf$describe_optimized_plan() to see the optimized plan)\" #>  SELECT [col(\"mpg\"), col(\"cyl\"), col(\"disp\"), col(\"hp\"), col(\"drat\"), col(\"wt\"), col(\"qsec\"), col(\"vs\"), col(\"am\"), col(\"gear\"), col(\"carb\")] FROM #>   FILTER [(col(\"cyl\")) == (4.0)] FROM #>  #>   DF [\"mpg\", \"cyl\", \"disp\", \"hp\"]; PROJECT */11 COLUMNS; SELECTION: \"None\"  as_polars_df(t, n_rows = 1) #> shape: (1, 11) #> ┌──────┬─────┬───────┬──────┬───┬─────┬─────┬──────┬──────┐ #> │ mpg  ┆ cyl ┆ disp  ┆ hp   ┆ … ┆ vs  ┆ am  ┆ gear ┆ carb │ #> │ ---  ┆ --- ┆ ---   ┆ ---  ┆   ┆ --- ┆ --- ┆ ---  ┆ ---  │ #> │ f64  ┆ f64 ┆ f64   ┆ f64  ┆   ┆ f64 ┆ f64 ┆ f64  ┆ f64  │ #> ╞══════╪═════╪═══════╪══════╪═══╪═════╪═════╪══════╪══════╡ #> │ 22.8 ┆ 4.0 ┆ 108.0 ┆ 93.0 ┆ … ┆ 1.0 ┆ 1.0 ┆ 4.0  ┆ 1.0  │ #> └──────┴─────┴───────┴──────┴───┴─────┴─────┴──────┴──────┘  compute(t, n = 1) # Equivalent to `as_polars_df(t, n_rows = 1)` #> shape: (1, 11) #> ┌──────┬─────┬───────┬──────┬───┬─────┬─────┬──────┬──────┐ #> │ mpg  ┆ cyl ┆ disp  ┆ hp   ┆ … ┆ vs  ┆ am  ┆ gear ┆ carb │ #> │ ---  ┆ --- ┆ ---   ┆ ---  ┆   ┆ --- ┆ --- ┆ ---  ┆ ---  │ #> │ f64  ┆ f64 ┆ f64   ┆ f64  ┆   ┆ f64 ┆ f64 ┆ f64  ┆ f64  │ #> ╞══════╪═════╪═══════╪══════╪═══╪═════╪═════╪══════╪══════╡ #> │ 22.8 ┆ 4.0 ┆ 108.0 ┆ 93.0 ┆ … ┆ 1.0 ┆ 1.0 ┆ 4.0  ┆ 1.0  │ #> └──────┴─────┴───────┴──────┴───┴─────┴─────┴──────┴──────┘  as.data.frame(t, n_rows = 1) #>    mpg cyl disp hp drat   wt  qsec vs am gear carb #> 1 22.8   4  108 93 3.85 2.32 18.61  1  1    4    1  # Clean up DBI::dbDisconnect(polarssql_default_connection())"},{"path":"https://rpolars.github.io/r-polarssql/reference/dbplyr-backend-polarssql.html","id":null,"dir":"Reference","previous_headings":"","what":"polarssql backend for dbplyr — dbplyr-backend-polarssql","title":"polarssql backend for dbplyr — dbplyr-backend-polarssql","text":"Use simulate_polarssql() dbplyr::tbl_lazy() dbplyr::lazy_frame() see simulated SQL without converting live access. tbl_polarssql() similar dbplyr::tbl_memdb(), backend Polars instead SQLite. uses polarssql_default_connection() DBI connection.","code":""},{"path":"https://rpolars.github.io/r-polarssql/reference/dbplyr-backend-polarssql.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"polarssql backend for dbplyr — dbplyr-backend-polarssql","text":"","code":"simulate_polarssql()  tbl_polarssql(df, name = deparse(substitute(df)), ..., overwrite = FALSE)"},{"path":"https://rpolars.github.io/r-polarssql/reference/dbplyr-backend-polarssql.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"polarssql backend for dbplyr — dbplyr-backend-polarssql","text":"df Data frame copy name Name table database: defaults random name unlikely conflict existing table. ... Ignored. overwrite TRUE, overwrite existing table name. TRUE (default), skip writing table already exists.","code":""},{"path":"https://rpolars.github.io/r-polarssql/reference/dbplyr-backend-polarssql.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"polarssql backend for dbplyr — dbplyr-backend-polarssql","text":"","code":"library(dplyr, warn.conflicts = FALSE)  # Test connection shows the SQL query. dbplyr::tbl_lazy(mtcars, simulate_polarssql(), name = \"mtcars\") |>   filter(cyl == 4) |>   arrange(desc(mpg)) |>   select(contains(\"c\")) |>   head(n = 3) #> <SQL> #> SELECT `cyl`, `qsec`, `carb` #> FROM `mtcars` #> WHERE (`cyl` = 4.0) #> ORDER BY `mpg` DESC #> LIMIT 3  # Actual polarssql connection shows the Polars naive plan (LazyFrame). tbl_polarssql(mtcars) |>   filter(cyl == 4) |>   arrange(desc(mpg)) |>   select(contains(\"c\")) |>   head(n = 3) #> [1] \"polars LazyFrame naive plan: (run ldf$describe_optimized_plan() to see the optimized plan)\" #> SLICE[offset: 0, len: 3] #>    SELECT [col(\"cyl\"), col(\"qsec\"), col(\"carb\")] FROM #>     SORT BY [col(\"mpg\")] #>        WITH_COLUMNS: #>        [col(\"cyl\"), col(\"qsec\"), col(\"carb\")] #>         FILTER [(col(\"cyl\")) == (4.0)] FROM #>  #>         DF [\"mpg\", \"cyl\", \"disp\", \"hp\"]; PROJECT */11 COLUMNS; SELECTION: \"None\"  # Unlike other dbplyr backends, `compute` has a special behavior. # It returns a polars DataFrame. tbl_polarssql(mtcars) |>   filter(cyl == 4) |>   arrange(desc(mpg)) |>   select(contains(\"c\")) |>   head(n = 3) |>   compute() #> shape: (3, 3) #> ┌─────┬───────┬──────┐ #> │ cyl ┆ qsec  ┆ carb │ #> │ --- ┆ ---   ┆ ---  │ #> │ f64 ┆ f64   ┆ f64  │ #> ╞═════╪═══════╪══════╡ #> │ 4.0 ┆ 19.9  ┆ 1.0  │ #> │ 4.0 ┆ 19.47 ┆ 1.0  │ #> │ 4.0 ┆ 16.9  ┆ 2.0  │ #> └─────┴───────┴──────┘"},{"path":"https://rpolars.github.io/r-polarssql/reference/polarssql-package.html","id":null,"dir":"Reference","previous_headings":"","what":"polarssql: A 'polars' backend for 'DBI'. — polarssql-package","title":"polarssql: A 'polars' backend for 'DBI'. — polarssql-package","text":"DBI-compliant interface 'polars'.","code":""},{"path":[]},{"path":"https://rpolars.github.io/r-polarssql/reference/polarssql-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"polarssql: A 'polars' backend for 'DBI'. — polarssql-package","text":"Maintainer: Tatsuya Shima ts1s1andn@gmail.com","code":""},{"path":"https://rpolars.github.io/r-polarssql/reference/polarssql.html","id":null,"dir":"Reference","previous_headings":"","what":"polarssql driver — polarssql","title":"polarssql driver — polarssql","text":"polarssql() creates DBI driver instance.","code":""},{"path":"https://rpolars.github.io/r-polarssql/reference/polarssql.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"polarssql driver — polarssql","text":"","code":"polarssql()"},{"path":"https://rpolars.github.io/r-polarssql/reference/polarssql.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"polarssql driver — polarssql","text":"","code":"polarssql() #> <polarssql_driver> #> r-polars package version : 0.13.1 #> rust-polars crate version: 0.36.2 #>  #> Thread pool size: 4  #>  #> Features:                                #> default                    TRUE #> full_features              TRUE #> disable_limit_max_threads  TRUE #> simd                       TRUE #> sql                        TRUE #> rpolars_debug_print       FALSE #>"},{"path":"https://rpolars.github.io/r-polarssql/reference/polarssql_default_connection.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the default connection — polarssql_default_connection","title":"Get the default connection — polarssql_default_connection","text":"Get default built-connection.","code":""},{"path":"https://rpolars.github.io/r-polarssql/reference/polarssql_default_connection.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the default connection — polarssql_default_connection","text":"","code":"polarssql_default_connection()"},{"path":"https://rpolars.github.io/r-polarssql/reference/polarssql_default_connection.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the default connection — polarssql_default_connection","text":"polarssql connection object","code":""},{"path":"https://rpolars.github.io/r-polarssql/reference/polarssql_default_connection.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get the default connection — polarssql_default_connection","text":"","code":"# Clean up DBI::dbDisconnect(polarssql_default_connection())  polarssql_default_connection() #> <polarssql_connection> #>   tables:     # Register a Table polarssql_register(mtcars = mtcars)  polarssql_default_connection() #> <polarssql_connection> #>   tables:  mtcars   # Clean up polarssql_unregister(\"mtcars\")  polarssql_default_connection() #> <polarssql_connection> #>   tables:"},{"path":"https://rpolars.github.io/r-polarssql/reference/polarssql_query.html","id":null,"dir":"Reference","previous_headings":"","what":"Execute SQL query — polarssql_query","title":"Execute SQL query — polarssql_query","text":"Execute SQL query","code":""},{"path":"https://rpolars.github.io/r-polarssql/reference/polarssql_query.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Execute SQL query — polarssql_query","text":"","code":"polarssql_query(sql, conn = polarssql_default_connection())"},{"path":"https://rpolars.github.io/r-polarssql/reference/polarssql_query.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Execute SQL query — polarssql_query","text":"sql SQL string. conn polarssql connection, created polarssql(). Use default built-connection default.","code":""},{"path":"https://rpolars.github.io/r-polarssql/reference/polarssql_query.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Execute SQL query — polarssql_query","text":"polars LazyFrame","code":""},{"path":"https://rpolars.github.io/r-polarssql/reference/polarssql_query.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Execute SQL query — polarssql_query","text":"","code":"polarssql_register(mtcars = mtcars)  query <- \"SELECT * FROM mtcars LIMIT 5\"  # Returns a polars LazyFrame polarssql_query(query) #> [1] \"polars LazyFrame naive plan: (run ldf$describe_optimized_plan() to see the optimized plan)\" #> SLICE[offset: 0, len: 5] #>    SELECT [col(\"mpg\"), col(\"cyl\"), col(\"disp\"), col(\"hp\"), col(\"drat\"), col(\"wt\"), col(\"qsec\"), col(\"vs\"), col(\"am\"), col(\"gear\"), col(\"carb\")] FROM #>     DF [\"mpg\", \"cyl\", \"disp\", \"hp\"]; PROJECT */11 COLUMNS; SELECTION: \"None\"  # Clean up polarssql_unregister(\"mtcars\")"},{"path":"https://rpolars.github.io/r-polarssql/reference/polarssql_register.html","id":null,"dir":"Reference","previous_headings":"","what":"Register data frames as tables — polarssql_register","title":"Register data frames as tables — polarssql_register","text":"Register data frames tables","code":""},{"path":"https://rpolars.github.io/r-polarssql/reference/polarssql_register.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Register data frames as tables — polarssql_register","text":"","code":"polarssql_register(   ...,   .conn = polarssql_default_connection(),   .overwrite = FALSE )  polarssql_unregister(names, conn = polarssql_default_connection())"},{"path":"https://rpolars.github.io/r-polarssql/reference/polarssql_register.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Register data frames as tables — polarssql_register","text":"... <dynamic-dots> Name-value pairs data.frame like objects register. .conn, conn polarssql connection, created polarssql(). Use default built-connection default. .overwrite existing registration overwritten? names Names tables unregister.","code":""},{"path":"https://rpolars.github.io/r-polarssql/reference/polarssql_register.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Register data frames as tables — polarssql_register","text":"polarssql connection invisibly.","code":""},{"path":"https://rpolars.github.io/r-polarssql/reference/polarssql_register.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Register data frames as tables — polarssql_register","text":"","code":"con <- dbConnect(polarssql())  polarssql_register(df1 = mtcars, df2 = mtcars, .conn = con) con #> <polarssql_connection> #>   tables:  df1 df2   polarssql_unregister(c(\"df1\", \"df2\"), conn = con) con #> <polarssql_connection> #>   tables:"},{"path":"https://rpolars.github.io/r-polarssql/reference/reexports.html","id":null,"dir":"Reference","previous_headings":"","what":"Objects exported from other packages — reexports","title":"Objects exported from other packages — reexports","text":"objects imported packages. Follow links see documentation. DBI dbAppendTable, dbCanConnect, dbCreateTable, dbExecute, dbGetQuery, dbIsReadOnly, dbListObjects, dbQuoteLiteral, dbReadTable, dbUnquoteIdentifier, dbWithTransaction, Id","code":""}]
